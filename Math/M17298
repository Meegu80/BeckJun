package javalab.ch01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.Stack;

// 오큰수 구하기 백준문제 17298번
public class M17298 {
    public static void main(String[] args) throws IOException {
        // 입력을 받기 위해 BufferedReader를 생성합니다.
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));

        // 첫 번째 줄에서 정수 n을 읽어옵니다.
        int n = Integer.parseInt(bf.readLine());

        // 배열 A와 ans를 크기 n으로 초기화합니다.
        int[] A = new int[n];
        int[] ans = new int[n];

        // 두 번째 줄에서 공백으로 구분된 숫자들을 읽어와서 배열 A에 저장합니다.
        String[] str = bf.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            A[i] = Integer.parseInt(str[i]);
        }

        // Stack을 이용하여 오큰수를 찾습니다.
        Stack<Integer> myStack = new Stack<>();

        // 스택에 첫 번째 인덱스를 넣습니다.
        myStack.push(0);

        // 두 번째 원소부터 끝까지 반복합니다.
        for (int i = 1; i < n; i++) {
            // 스택이 비어있지 않고, 현재 원소가 스택의 인덱스가 가리키는 원소보다 크다면
            while (!myStack.isEmpty() && A[myStack.peek()] < A[i]) {
                // 스택에서 인덱스를 꺼내서 그 위치의 ans에 현재 원소를 저장합니다.
                ans[myStack.pop()] = A[i];
            }
            // 현재 인덱스를 스택에 넣습니다.
            myStack.push(i);
        }

        // 스택에 남아있는 인덱스의 ans 값을 -1로 설정합니다.
        while (!myStack.empty()) {
            ans[myStack.pop()] = -1;
        }

        // 결과를 출력하기 위해 BufferedWriter를 사용합니다.
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        for (int i = 0; i < n; i++) {
            bw.write(ans[i] + " ");
        }
        bw.write("\n");
        bw.flush();
    }
}
